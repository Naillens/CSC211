Examples of Two Access Modifiers

**public:

Accessible from anywhere (same class, same package, different package).

Used when we want a method or variable to be available globally.

Example:

public void printName() { ... }
A method like this can be accessed from any other class.

**private:

Accessible only within the same class.

Used for encapsulationâ€”keeping data safe and hidden from external modification.

Example:

private int age;
Keeps the age variable hidden, but we can provide getters/setters to control access.

 Benefits of Inheritance (Analyst & Employee Example from Section 3)

**The Analyst class inherits fields and methods from Employee (like name, salary, getSalary()).

No need to rewrite common code in every employee-related class.

Organization:

**Employee acts as a general template for all job roles.

Analyst specializes the role by adding unique attributes (e.g., specialty).

Polymorphism:

** An Employee variable can hold an Analyst object.

This makes it easy to handle multiple job types with shared behavior in a unified way.

Maintainability:

** If Employee changes (e.g., adding department), all subclasses (like Analyst) automatically inherit the update.

Reduces duplication and errors.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Parent Class
class Shape {
    private int numberOfSides;

    // Constructor
    public Shape(int numberOfSides) {
        this.numberOfSides = numberOfSides;
    }

    // Getter
    public int getNumberOfSides() {
        return numberOfSides;
    }

    // Setter
    public void setNumberOfSides(int numberOfSides) {
        this.numberOfSides = numberOfSides;
    }
}

// Subclass Circle
class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        // A circle has 0 sides (by definition)
        super(0);
        this.radius = radius;
    }

    public double getArea() {
        return Math.PI * radius * radius;
    }
}

// Subclass Rectangle
class Rectangle extends Shape {
    private double length;
    private double width;

    public Rectangle(double length, double width) {
        // A rectangle has 4 sides
        super(4);
        this.length = length;
        this.width = width;
    }

    public double getArea() {
        return length * width;
    }
}

// test
public class Main {
    public static void main(String[] args) {
        Circle circle = new Circle(5.0);
        Rectangle rectangle = new Rectangle(4.0, 6.0);

        // Using Shape's getter method via Circle object
        System.out.println("Circle number of sides: " + circle.getNumberOfSides());
        System.out.println("Circle area: " + circle.getArea());

        // Using Shape's getter method via Rectangle object
        System.out.println("Rectangle number of sides: " + rectangle.getNumberOfSides());
        System.out.println("Rectangle area: " + rectangle.getArea());
    }
}
